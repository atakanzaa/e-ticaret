version: '3.8'

services:
  postgres:
    build:
      context: ../infrastructure/postgres
      dockerfile: Dockerfile
    image: postgres-service:latest
    ports:
      - "15432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  zookeeper:
    build:
      context: ../infrastructure/zookeeper
      dockerfile: Dockerfile
    image: zookeeper-service:latest
    ports:
      - "2181:2181"

  kafka:
    build:
      context: ../infrastructure/kafka
      dockerfile: Dockerfile
    image: kafka-service:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"

  rabbitmq:
    build:
      context: ../infrastructure/rabbitmq
      dockerfile: Dockerfile
    image: rabbitmq-service:latest
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123

  # MinIO Object Storage
  minio:
    build:
      context: ../infrastructure/minio
      dockerfile: Dockerfile
    image: minio-service:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MailHog Email Testing
  mailhog:
    build:
      context: ../infrastructure/mailhog
      dockerfile: Dockerfile
    image: mailhog-service:latest
    ports:
      - "1025:1025"
      - "8025:8025"
    environment:
      MH_SMTP_BIND_ADDR: 0.0.0.0:1025
      MH_API_BIND_ADDR: 0.0.0.0:8025
      MH_UI_BIND_ADDR: 0.0.0.0:8025
      MH_STORAGE: memory
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth:
    build: ../auth-service
    image: auth-service:latest
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/eticaret?currentSchema=auth
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - postgres
      - rabbitmq
      - kafka

  # Order Payment Service
  order-payment:
    build: ../order-payment-service
    image: order-payment-service:latest
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/eticaret?currentSchema=order_payment
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
      # iyzico sandbox credentials
      IYZICO_API_BASE: https://sandbox-api.iyzipay.com
      IYZICO_API_KEY: sandbox-Krg04h0IF0kWcTi9RlzB87ILNPfCc5iW
      IYZICO_SECRET_KEY: sandbox-lBrmq0iCUw9DrPju07tXNHkNjOJ5ehvq
      IYZICO_CALLBACK_URL: http://localhost:8086/api/payment/webhook/iyzico
      IYZICO_CURRENCY: TRY
      IYZICO_LOCALE: tr
      # Kafka Topics
      KAFKA_TOPICS_ORDER_CREATED: order_created
      KAFKA_TOPICS_PAYMENT_SUCCEEDED: payment_succeeded
    depends_on:
      - postgres
      - kafka
      - rabbitmq

  # Catalog Service
  catalog:
    build: ../catalog-service
    image: catalog-service:latest
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/eticaret?currentSchema=catalog
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_RABBITMQ_HOST: rabbitmq
    depends_on:
      - postgres
      - kafka
      - rabbitmq

  # Seller Service
  seller:
    build: ../seller-service
    image: seller-service:latest
    ports:
      - "8083:8083"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/eticaret?currentSchema=seller
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 123456
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: admin
      SPRING_RABBITMQ_PASSWORD: admin123
      CATALOG_SERVICE_URL: http://catalog:8082
    depends_on:
      - postgres
      - kafka
      - rabbitmq
      - catalog

  # Gateway Service
  gateway:
    build: ../gateway-service
    image: gateway-service:latest
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      AUTH_SERVICE_URL: http://auth:8081
      CATALOG_SERVICE_URL: http://catalog:8082
      SELLER_SERVICE_URL: http://seller:8083
      ORDER_PAYMENT_SERVICE_URL: http://order-payment:8086
      JWT_JWK_SET_URI: http://auth:8081/.well-known/jwks.json
    depends_on:
      - auth
      - catalog
      - seller
      - order-payment

volumes:
  postgres_data:
  minio_data: